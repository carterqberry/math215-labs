# -*- coding: utf-8 -*-
"""CarterQ Math215 Lab8

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uWg7HhC4HrKCUCRGtDgEnOK0tTAR_s5R

#**Lab 8 - Linear Transformations**

Enter your code in the spaces provided. Do not change any of the variable names or function names that are already provided for you. In places where we specify the name of the return value, make sure that your code produces the a value with the correct name.
"""

# Do not edit this cell.

LabID="Lab8"

try:
  from graderHelp import ISGRADEPLOT
except ImportError:
  ISGRADEPLOT = True

"""**Enter your name, section number, and BYU NetID**"""

# Enter your first and last names in between the quotation marks.

first_name="Carter"

last_name="Quesenberry"

# Enter your Math 215 section number in between the quotation marks. 

section_number="001"  

# Enter your BYU NetID in between the quotation marks.  NOT YOUR BYU ID NUMBER! 

BYUNetID="carterqb"

"""**Import NumPy**"""

import numpy as np

"""**Problem 1**"""

def transform(x):
  a = np.array([[2, 1], [1, -3], [0, 1]])
  return np.array(np.dot(a, x))

transform([1,2])

"""**Downloading and visualizing our data**

The simplest way to load the data into Colab is to first download it as a .csv file to your local computer by clicking the link

https://drive.google.com/uc?export=download&id=1tWus0zXDSahrms0dl8TTV0Pl8bbWlx9j

This will allow you to download the data as a .csv file. In the top left corner of this screen you should see a little file folder icon.   Selecting it opens a new window to the left of the notebook with three tabs: "Upload", "Refresh", and "Mount Drive". Select "Upload".  This should bring up a window that allows you to select the file "cougar.csv" from your local machine, which will upload the file to your notebook.  You will need to do this again if you decide to close your notebook and reopen it at a later time.

Once you've uploaded your file, convert it to a NumPy array called "cougar" by executing the following cell.
"""

import pandas as pd
from matplotlib import pyplot as plt

df = pd.read_csv('cougar.csv')
cougar=df.values
cougar

"""Now let's define a function that we can use to plot the array cougar that we've just created (or any other array of points which we'd like to visualize)."""

def showplot(H):
  # This function displays the image produce by the collection of coordinates given in H
  cougarplot=plt.plot(H[0,:],H[1,:],'k.',markersize=3.5)
  plt.axis([-1.5,1.5,-1.5,1.5])
  plt.gca().set_aspect("equal")
  plt.show()
  return None


# Let's test the function above by plotting the data in our NumPy array cougar  
showplot(cougar)

"""**Problem 2**"""

def stretch(image,a,b): 
  A = transform(image)
  B = np.array([[a, 0], [0, b]])
  return np.array(np.dot(B, image))

def shear(image,a,b): 
  A = transform(image)
  B = np.array([[1, a], [b, 1]])
  return np.array(np.dot(B, image))

def reflect(image,a,b): 
  A = transform(image)
  B = np.array([[(a**2 - b**2), 2*(a*b)], [2*(a*b), (b**2 - a**2)]])
  C = np.array((1/(a**2+b**2))*B)
  return np.array(np.dot(C, image))

def rotate(image,theta): 
  A = transform(image)
  B = np.array([[np.cos(theta), (np.sin(theta)*-1)],[np.sin(theta), np.cos(theta)]])
  return np.array(np.dot(B, image))

"""**Problem 3**"""

iden=np.array([[1,0],[0,1]]) # The identity matrix may be helpful here.

comp_matrix = stretch(rotate(reflect(stretch(iden, 1/2, 1), 1, -3/2), np.pi/4), 1, 2)

"""The following code can be copied to your practice notebook and used to visualize the linear transformations in the following questions."""

from matplotlib import pyplot as plt
import numpy as np

def plot_transformation(mat):
    plt.cla()
    e1=np.array([1,0])
    e2=np.array([0,1])
    v3=e1+e2
    plot_lims=abs(np.array([[0,1],mat@e1,mat@v3,mat@e2])).max()
    trans_square=plt.Polygon([mat@e1,mat@v3,mat@e2,[0,0]],ec=(0,0,1,1),fc=(0,0,1,0.5))
    orig_square=plt.Polygon([e1,v3,e2,[0,0]],fc=(1,0,0,0.5),ec=(1,0,0,1))
    plt.gca().add_patch(trans_square)
    plt.gca().add_patch(orig_square)
    plt.axis('scaled')
    plt.ylim(-1.05*plot_lims,1.05*plot_lims)
    plt.xlim(-1.05*plot_lims,1.05*plot_lims)
    ax=plt.gca()
    ax.spines['top'].set_position(('data',0))
    ax.spines['right'].set_position(('data',0))
    ax.spines['bottom'].set_position(('data',0))
    ax.spines['left'].set_position(('data',0))
    plt.show()
    return

"""**Problem 4**"""

def area(A): 
  a = np.linalg.norm(A[0, :])
  b = np.linalg.norm(A[1, :])
  return a*b*np.sin(np.arccos(np.dot(A[0, :], A[1, :])/np.dot(a, b)))

D = np.array([[1,3],[2,-1]])
area(D)

"""**Problem 5**"""

# Save the values of the determinants of the matrices A,B,C, and D from Problem 5.
M = np.array([[2,1],[-2,4]])
N = np.array([[3,1],[2,-1]])
P = np.array([[-1,2],[-1,-1]])
Q = np.array([[0.6,-0.5],[0.2,-0.5]])

detM = np.array([[2,1],[-2,4]])
detN = np.array([[3,1],[2,-1]])
detP = np.array([[-1,2],[-1,-1]])
detQ = np.array([[0.6,-0.5],[0.2,-0.5]])

"""**Problem 6**"""

# Save the values of the matrix A and the area of the ellipse from Problem 6.

circ = np.array([[0,1],[1,0]])
elip = np.array([[1.5,1],[0.5,-2.75]])
a = np.linalg.solve(circ,elip)

ellipse_matrix = elip
ellipse_area = area(elip) * np.pi

"""**Problem 7**"""

# Save the values of the determinants of the matrices B1,B3,B6, and B0 from Problem 5.

B1 = np.array([[4,3],[2,6]])
B3 = np.array([[1.5,3],[2,6]])
B6 = np.array([[1.00001,3],[2,6]])
B0 = np.array([[1,3],[2,6]])

detB1 = np.linalg.det(B1)

detB3 = np.linalg.det(B3)

detB6 = np.linalg.det(B6)

detB0 = np.linalg.det(B0)

"""**STOP!  BEFORE YOU SUBMIT THIS LAB:**  Go to the "Runtime" menu at the top of this page, and select "Restart and run all".  If any of the cells produce error messages, you will either need to fix the error(s) or delete the code that is causing the error(s).  Then use "Restart and run all" again to see if there are any new errors.  Repeat this until no new error messages show up.

**You are not ready to submit until you are able to select "Restart and run all" without any new error messages showing up. Your code will not be able to be graded if there are any error messages.**

To submit your lab for grading you must first download it to your compute as .py file. In the "File" menu select "Download .py". The resulting file can then be uploaded to http://www.math.byu.edu:30000 for grading.
"""